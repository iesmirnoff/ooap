package lesson2

interface LinkedList<T> {

    // Команды

    // Предусловие: список не пустой
    // Постусловие: курсор установлен на крайний левый узел списка
    fun head()

    // Предусловие: список не пустой
    // Постусловие: курсор установлен на крайний правый узел списка
    fun tail()

    // Предусловие: список не пустой и курсор не указывает на крайний правый узел
    // Постусловие: курсор установлен на узел, правый по отношению к текущему на момент выполнения команды узлу
    fun right()

    // Предусловие: курсор установлен на какой-либо узел
    fun get(): T

    // Предусловие: список не пустой
    // Постусловие: удален текущий узел, курсор указывает
    // на правый по отношению к удаленному узлу, если таковой есть в списке,
    // на левый по отношению к удаленному узлу, если удален крайний правый,
    // никуда, если удален единственный узел
    fun remove()

    // Постусловие: удалены все узлы
    fun clear()

    fun size(): Int

    // Предусловие: список пустой
    // Постусловие: в список добавлен узел и курсор установлен на этот узел
    fun addToEmpty(value: T)

    // Предусловие: список не пустой
    // Постусловие: слева от текущего добавлен новый узел, курсор указывает на текущий узел
    fun putLeft(value: T)

    // Предусловие: список не пустой
    // Постусловие: справа от текущего добавлен новый узел, курсор указывает на текущий узел
    fun putRight(value: T)

    // Предусловие: список не пустой
    // Постусловие: новый узел добавлен в конец списка
    fun addTail(value: T)

    // Предусловие: список не пустой и курсор указывает на какой-либо узел
    // Постусловие: значение текущего узла заменено на новое
    fun replace(value: T)

    // Предусловие: список не пустой
    // Постусловие: курсор указывает на следующий узел с искомым значением
    fun find(value: T)

    // Предусловие: список не пустой
    // Постусловие: из списка удалены все узлы с заданным значением
    fun removeAll(value: T)

    // Запросы

    fun getRemoveAllStatus(): Int

    fun isHead(): Boolean

    fun isTail(): Boolean

    fun isValue(): Boolean

    fun getHeadStatus(): Int

    fun getTailStatus(): Int

    fun getRightStatus(): Int

    fun getRemoveStatus(): Int

    fun getAddToEmptyStatus(): Int

    fun getPutRightStatus(): Int

    fun getPutLeftStatus(): Int

    fun getAddTailStatus(): Int

    fun getReplaceStatus(): Int

    fun getFindStatus(): Int

    companion object {

        // Ошибка, список пуст
        const val HEAD_NIL = 2
        // Команда отработала успешно
        const val HEAD_OK = 0

        // Ошибка, список пуст
        const val TAIL_NIL = 2
        // Команда отработала успешно
        const val TAIL_OK = 0

        // Ошибка, список пуст
        const val RIGHT_NIL = 2
        // Ошибка, курсор уже указывает на крайний правый узел
        const val RIGHT_ERR = 1
        // Команда отработала успешно
        const val RIGHT_OK = 0

        // Ошибка, список пуст
        const val REMOVE_NIL = 2
        // Ошибка, не найдено элементов для удаления справа от курсора включительно
        const val REMOVE_ERR = 1
        // Команда отработала успешно
        const val REMOVE_OK = 0

        // Ошибка, список не пуст
        const val ADD_TO_EMPTY_ERR = 1
        // Команда отработала успешно
        const val ADD_TO_EMPTY_OK = 0

        // Ошибка, список пуст
        const val PUT_RIGHT_NIL = 2
        // Команда отработала успешно
        const val PUT_RIGHT_OK = 0

        // Ошибка, список пуст
        const val PUT_LEFT_NIL = 2
        // Команда отработала успешно
        const val PUT_LEFT_OK = 0

        // Ошибка, список пуст
        const val ADD_TAIL_NIL = 2
        // Команда отработала успешно
        const val ADD_TAIL_OK = 0

        // Ошибка, список пуст
        const val REPLACE_NIL = 2
        // Команда отработала успешно
        const val REPLACE_OK = 0

        // Ошибка, список пуст
        const val FIND_NIL = 2
        // Ошибка, не найдено узлов с заданным значением справа от курсора включительно
        const val FIND_ERR = 1
        // Команда отработала успешно
        const val FIND_OK = 0
    }
}